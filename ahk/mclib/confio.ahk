#Include string.ahk

; class containing configuration data from a file
;  subConfig - map of configs based on groupings from config file
;  items - map of individual settings from config file (left of deliminator = key | right = value)
class Config {
	
	subConfigs := Map()
	items := Map()
	
	__New() {
		MsgBox("breh")
	}
}

; reads from a file/string and generates a Config object
;  toRead - string/file to read
;  deliminator - string containing separator between a setting's key and value
;  subConfigType - how config file is formatted with its categories of configs
;                - brackets -> standard config file using bracketed category names 
;                - xml -> formatted like an xml document with <x>...</x>
;                - indents_x_y -> using indentation (x = number of indents per level | y = type (spaces/tabs))
;                - none -> config file contains no categories
;  subConfig - list of categories to find, empty = all categories
;
; returns Config object
readConfig(toRead, deliminator := "=", subConfigType := "none", subConfig := []) {

}

; reads custom formatted multicfg files with readConfig() on each requested one
;  fileName - multicfg file to read
;  configList - list of configs to find in multicfg
;  configListType - how to handle multiple values in configList (either "and" or "or")
;  checkDefault - check if multicfg contains default values to be overwritten
;  deliminator / subConfigType / subConfig - see readConfig()
; returns Config object generated by readConfig()
findMultiCfg(fileName, configList := [], configListType := "or", checkDefault := true
	, deliminator := "=", subConfigType := "none", subConfig := []) {

}